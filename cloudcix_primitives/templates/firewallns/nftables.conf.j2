#!/usr/sbin/nft -f

# each domain is a table
table inet {{ table }} {
{# ----------------------------------------------------------------------- #}
{% if applications|length > 0 %}
    # cloudcix supported applications(a rule with one or more conditions)
{% for application in applications %}
{% if application == 'icmp_accept' %}
    # icmp v4 allow
    chain icmp_accept {
        icmp type { echo-reply, destination-unreachable, echo-request, time-exceeded } accept
    }
{% elif application == 'icmp_drop' %}
    # icmp v4 block
    chain icmp_drop {
        icmp type { echo-reply, destination-unreachable, echo-request, time-exceeded } drop
    }
{% elif application == 'icmp6_accept' %}
    # icmp v6 allow
    chain icmp6_accept {
        icmpv6 type { echo-reply, echo-request, mld-listener-query, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert } accept
    }
{% elif application == 'icmp6_drop' %}
    # icmp v6 block
    chain icmp6_drop {
        icmpv6 type { echo-reply, echo-request, mld-listener-query, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert } drop
    }
{% elif application == 'dns_accept' %}
    # dns allow
    chain dns_accept {
        meta l4proto {tcp, udp} th dport 53 accept
    }
{% elif application == 'dns_drop' %}
    # dns block
    chain dns_drop {
        meta l4proto {tcp, udp} th dport 53 drop
    }
{% elif application == 'vpn_accept' %}
    # vpn allow
    chain vpn_accept {
        # IKE 500, 4500 ports and udp protocol
        udp dport { 500, 4500 } accept
        ip protocol esp accept
    }
{% elif application == 'vpn_drop' %}
    # vpn block
    chain vpn_drop {
        # IKE 500, 4500 ports and udp protocol
        meta l4proto udp th dport { 500, 4500 } drop
        # Allow IPSec esp protocol
        ip protocol esp drop
    }
{% endif %}
{% endfor %}
{% endif %}
{# ----------------------------------------------------------------------- #}
{% if sets|length > 0 %}
    # Sets definitions
{% for obj in sets %}
    set {{ obj['name'] }} {
        type {{ obj['type'] }}
        flags interval
        elements = {
            {{ ', '.join(obj['elements']) }}
        }
    }
{% endfor %}
{% endif %}
{# ----------------------------------------------------------------------- #}
{% if dnat_rules|length > 0 %}
    # Inbound NAT (DNAT), Only IPv4 at Pre Routing stage,
    # for nat type chains default policy is accept because filtering not happens here
    chain nat_prerouting {
        type nat hook prerouting priority {{ priority }}; policy accept;
        # Inbound destination NAT 1:1
{% for rule in dnat_rules %}
        {{ rule }}
{% endfor %}
    }
{% endif %}
{# ----------------------------------------------------------------------- #}
{% if prerouting_global_rules|length > 0 %}
    # Global rules for incomming traffic, IPv4 and IPv6
    chain filter_prerouting {
        type filter hook prerouting priority {{ priority }}; policy {{ default_policy }};
        # Inbound destination NAT 1:1
{% for rule in prerouting_global_rules %}
        {{ rule }}
{% endfor %}
    }
{% endif %}
{# ----------------------------------------------------------------------- #}
{% if input_rules|length > 0 %}
    # Traffic TO Namespace IPv4 and IPv6
    chain filter_input {
        type filter hook input priority {{ priority }}; policy {{ default_policy }};
{% for rule in input_rules %}
        {{ rule }}
{% endfor %}
    }
{% endif %}
{# ---------------------------------------------------------------------- #}
{% if forward_rules|length > 0 %}
    # Traffic TO and FROM VMs in Namespace Networks, IPv4 and IPv6
    chain filter_forward {
        type filter hook forward priority {{ priority }}; policy {{ default_policy }};

{% for rule in forward_rules %}
        {{ rule }}
{% endfor %}

    }
{% endif %}
{# ---------------------------------------------------------------------- #}
{% if output_rules|length > 0 %}
    # Traffic FROM Namespace IPv4 and IPv6
    chain filter_output {
        type filter hook output priority {{ priority }}; policy {{ default_policy }};
{% for rule in output_rules %}
        {{ rule }}
{% endfor %}
    }
{% endif %}
{# ---------------------------------------------------------------------- #}
{% if snat_rules|length > 0 %}
    # Outbound NAT(SNAT), Only IPv4 at Post-Routing stage, for nat type chains default policy is accept
    chain nat_postrouting {
        type nat hook postrouting priority {{ priority }}; policy accept;
        # Source NAT 1:N
    {% for snat in snat_rules %}
        {{ snat }}
    {% endfor %}
    }
{% endif %}
{# ---------------------------------------------------------------------- #}
{% if postrouting_global_rules|length > 0 %}
    # Global rules just before leaving the namespace,
    # at this stage, outgoing traffic is already controlled in previous stages/hooks so defaulting to accept.
    # if set to drop then this will block the traffic allowed in filter_forward chain
    chain filter_postrouting {
        type filter hook postrouting priority {{ priority }}; policy {{ default_policy }};
    {% for rule in postrouting_global_rules %}
        {{ rule }}
    {% endfor %}
    }
{% endif %}
}
